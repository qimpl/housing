// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/housing": {
            "get": {
                "description": "Search all housing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Get all housing",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new housing with given data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Insert a housing",
                "parameters": [
                    {
                        "description": "Housing data",
                        "name": "housing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Housing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/owner/{owner_id}": {
            "get": {
                "description": "Search for all housings with a given owner ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Get all housings of a owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Owner ID",
                        "name": "owner_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/status": {
            "get": {
                "description": "Search all housing statuses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing Status"
                ],
                "summary": "Get all housing statuses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new housing status with given data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing Status"
                ],
                "summary": "Insert a housing status",
                "parameters": [
                    {
                        "description": "Housing status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/type": {
            "get": {
                "description": "Search all housing types",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing Types"
                ],
                "summary": "Get all housing types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new housing type with given data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing Types"
                ],
                "summary": "Insert a housing type",
                "parameters": [
                    {
                        "description": "Housing type data",
                        "name": "type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HousingType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/type/{housing_type_id}": {
            "get": {
                "description": "Search all housing of a given type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing Types"
                ],
                "summary": "Get all housing by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing type ID",
                        "name": "housing_type_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/{housing_id}": {
            "get": {
                "description": "Search for a given housing with its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Get a housing by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing ID",
                        "name": "housing_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a given housing by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Update a housing by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing ID",
                        "name": "housing_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Housing data",
                        "name": "housing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HousingBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a given housing by ID",
                "tags": [
                    "Housing"
                ],
                "summary": "Delete a housing by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing ID",
                        "name": "housing_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/{housing_id}/publication": {
            "patch": {
                "description": "Update the publication status of a housing",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Update publication status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing ID",
                        "name": "housing_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status ID",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePublicationStatus"
                        }
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/housing/{housing_id}/status": {
            "put": {
                "description": "Update the status of a given housing",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Housing"
                ],
                "summary": "Update status of housing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing ID",
                        "name": "housing_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status ID",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateStatusBody"
                        }
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/visit": {
            "post": {
                "description": "Create a new housing visit with given data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Insert a visit",
                "parameters": [
                    {
                        "description": "Visit data",
                        "name": "visit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Visit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/visit/housing/{housing_id}": {
            "get": {
                "description": "Get all visits of a housing with its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Get all visits of a housing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Housing ID",
                        "name": "housing_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/visit/{visit_id}/accept": {
            "patch": {
                "description": "Update a given visit booking IsAccepted field to true",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visits"
                ],
                "summary": "Accept a non accepted visit booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Visit booking ID",
                        "name": "visit_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Housing": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Lille"
                },
                "country": {
                    "type": "string",
                    "example": "FR"
                },
                "has_electricity": {
                    "type": "boolean",
                    "example": true
                },
                "has_gas": {
                    "type": "boolean",
                    "example": false
                },
                "is_furnished": {
                    "type": "boolean",
                    "example": false
                },
                "is_published": {
                    "type": "boolean",
                    "example": true
                },
                "last_tenant_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "owner_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "rent_price": {
                    "type": "number",
                    "example": 60.95
                },
                "rental_charges": {
                    "type": "number",
                    "example": 60.9
                },
                "state": {
                    "type": "string",
                    "example": "Haut-de-France"
                },
                "status_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "street": {
                    "type": "string",
                    "example": "78 Rue Solférino"
                },
                "surface_area": {
                    "type": "number",
                    "example": 15.5
                },
                "type_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "zip": {
                    "type": "string",
                    "example": "59000"
                }
            }
        },
        "models.HousingBody": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Lille"
                },
                "country": {
                    "type": "string",
                    "example": "FR"
                },
                "has_electricity": {
                    "type": "boolean",
                    "example": true
                },
                "has_gas": {
                    "type": "boolean",
                    "example": false
                },
                "is_furnished": {
                    "type": "boolean",
                    "example": false
                },
                "is_published": {
                    "type": "boolean",
                    "example": true
                },
                "last_tenant_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "owner_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "rent_price": {
                    "type": "number",
                    "example": 60.95
                },
                "rental_charges": {
                    "type": "number",
                    "example": 60.9
                },
                "state": {
                    "type": "string",
                    "example": "Haut-de-France"
                },
                "status_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "street": {
                    "type": "string",
                    "example": "78 Rue Solférino"
                },
                "surface_area": {
                    "type": "number",
                    "example": 15.5
                },
                "type_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                },
                "zip": {
                    "type": "string",
                    "example": "59000"
                }
            }
        },
        "models.HousingType": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "garage"
                }
            }
        },
        "models.Status": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "sold"
                }
            }
        },
        "models.UpdatePublicationStatus": {
            "type": "object",
            "properties": {
                "is_published": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.UpdateStatusBody": {
            "type": "object",
            "properties": {
                "status_id": {
                    "type": "string",
                    "example": "e185deb2-91d5-4ab7-87b3-daaffac00e3d"
                }
            }
        },
        "models.Visit": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2020-11-05"
                },
                "hour": {
                    "type": "string",
                    "example": "18:00"
                },
                "housing_id": {
                    "type": "string",
                    "example": "cb7bc97f-45b0-4972-8edf-dc7300cc059c"
                },
                "is_accepted": {
                    "type": "boolean",
                    "example": false
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Housing API",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
